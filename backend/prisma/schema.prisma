generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  folders   Folder[]
  files     File[]

  @@map("users")
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  ownerId   Int
  parentId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner     Users     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  parent    Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  Folder[]  @relation("FolderHierarchy")
  files     File[]
  shareLinks ShareLink[]

  @@map("folders")
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  mimetype  String
  size      Int
  cloudUrl  String
  publicId  String
  folderId  Int?
  ownerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner     Users    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  folder    Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model ShareLink {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  folderId  Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@map("share_links")
}
